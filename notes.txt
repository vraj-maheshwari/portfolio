=====================================================================================
==============#checkbox ma value put kari button click karvu 

from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

# Use Service object (modern method)
service = Service("chromedriver-win64/chromedriver.exe")
driver = webdriver.Chrome(service=service)

driver.get('https://opensource-demo.orangehrmlive.com/')

# Wait until the username field is present
wait = WebDriverWait(driver, 10)
wait.until(EC.presence_of_element_located((By.NAME, "username")))

# Login actions using updated find_element() syntax
driver.find_element(By.NAME, "username").send_keys("Admin")
driver.find_element(By.NAME, "password").send_keys("admin123")
driver.find_element(By.CLASS_NAME, "orangehrm-login-button").click()

====================================================================================
#return title of page
tileofpage=driver.title

====================================================================================
#close browser
driver.close()

=====================================================================================
========= asus laptop searchbox ma nakhi search karvau find id and class thi karyu

serviceobj = Service("chromedriver-win64/chromedriver.exe")
driver = webdriver.Chrome(service=serviceobj)

driver.get("https://demo.nopcommerce.com/")

driver.maximize_window()

#id locator and class locator
driver.find_element(By.ID, "small-searchterms").send_keys("Asus Laptop")
driver.find_element(By.CLASS_NAME,"search-box-button").click()

=====================================================================================

#name thi find karyu
#driver.find_element(By.NAME, "q").send_keys("Asus Laptop")

=====================================================================================
#text thi link sodhi and click karyu 
#link text
driver.find_element(By.LINK_TEXT,"Register").click()

=====================================================================================
#addha text thi select thay 
#partial link text
driver.find_element(By.PARTIAL_LINK_TEXT,"Reg").click()

=====================================================================================
#count umber of eelmenets 
#class
sliders = driver.find_elements(By.CLASS_NAME,"slider-img")
print("number of slider image is: ",len(sliders))

=====================================================================================
#count number of links on particular page 
links = driver.find_elements(By.TAG_NAME,"a")
print("number of links is: ",len(links))

====================================================================================
#select by tag name and id
#synatx -> tag#id
driver.find_element(By.CSS_SELECTOR,"input#email").send_keys("xyz")
driver.find_element(By.CSS_SELECTOR,"#email").send_keys("xyz")

====================================================================================
#select by tag name and class name
#synatx -> tag.class name
#here firts line gives errro coz space here so just consider before space part 
driver.find_element(By.CSS_SELECTOR,"input.inputtext _55r1 _6luy").send_keys("xyz")  
driver.find_element(By.CSS_SELECTOR,"input.inputtext").send_keys("xyz")  

====================================================================================
#select by tagename + attribute value pair 

#tag and attribute  --> tagname[attribute=value]
driver.find_element(By.CSS_SELECTOR,"input[data-testid='royal-email']").send_keys("xyz")

=====================================================================================
#select by tagnamee+classname + attributr value

#tag,class and attribute  --> tganme.classname[attribute=value]
driver.find_element(By.CSS_SELECTOR,"input.inputtext[data-testid='royal-pass']").send_keys("xyz")

=====================================================================================
#xpath


# driver.find_element(By.XPATH,'/html/body/div[1]/div/div[1]/div/div/div/div/div/div/div/div/div/div[1]/div/div/header/div[1]/div[2]/form/div/div/input').send_keys("tv")
# driver.find_element(By.XPATH,"/html[1]/body[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/header[1]/div[1]/div[2]/form[1]/div[1]/button[1]/*[name()='svg'][1]").click()


#"or" ane "and" no use 
driver.find_element(By.XPATH,"//input[@name='q' or @class='Pke_EE']").send_keys("tv")
#input ni jagayye * muki sakay tag name na khabar hoy to


driver.find_element(By.XPATH,"/html[1]/body[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/div[1]/header[1]/div[1]/div[2]/form[1]/div[1]/button[1]/*[name()='svg'][1]").click()
                    
#if id are 2 stop and start so we can use contaits "st"
driver.find_element(By.XPATH,"//input[contains(@id,'st')]").send_keys("xyz")
driver.find_element(By.XPATH,"//input[starts-with(@id,'st')]").send_keys("xyz")

#text function
driver.find_element(By_XPATH,"//a[text()='women']")

====================================================================================


textt = driver.find_element(By.XPATH,"//a[contains(text(),'Mish Designs')]/self::a").text
print(textt)

#parent
textt = driver.find_element(By.XPATH,"//a[contains(text(),'Mish Designs')]/parent::td").text
print(textt)

#ancestor (dada)
textt = driver.find_element(By.XPATH,"//a[contains(text(),'Mish Designs')]/ancestor::tr").text
print(textt)

#ancestor (dada)
textt = driver.find_elements(By.XPATH,"//a[contains(text(),'Mish Designs')]/ancestor::tr/child::td")
print(len(textt))

#decentor
textt = driver.find_element(By.XPATH,"//a[contains(text(),'Mish Designs')]/ancestor::tr/descendant::*").text
print(textt)

textt = driver.find_elements(By.XPATH,"//a[contains(text(),'Mish Designs')]/ancestor::tr/descendant::*")
print(len(textt))

textt = driver.find_element(By.XPATH,"//a[contains(text(),'Mish Designs')]/ancestor::tr/following::*").text
print(textt)

textt = driver.find_element(By.XPATH,"//a[contains(text(),'Mish Designs')]/ancestor::tr/preceding::*").text
print(textt)

textt = driver.find_element(By.XPATH,"//a[contains(text(),'Mish Designs')]/ancestor::tr/following-sibling::*").text
print(textt)


textt = driver.find_elements(By.XPATH,"//a[contains(text(),'Mish Designs')]/ancestor::tr/following-sibling::*")
print(len(textt))

print(textt[0].text)

=====================================================================================

driver.get("https://opensource-demo.orangehrmlive.com/web/index.php/auth/login")

print("title is",driver.title)

print("currrent url",driver.current_url)

print("page source is ",driver.page_source)

driver.close()

=====================================================================================
#check is dispalyed or is chked


driver.get("https://www.flipkart.com/")

searchbox = driver.find_element(By.XPATH,"//input[@class='Pke_EE']")

print(searchbox.is_displayed())

print(searchbox.is_enabled())

#is_selected 

====================================================================================
driver.close() close current browser window
drive.quite()   closer all bowser window

=====================================================================================
time.sleep(5) used for delay

=====================================================================================
driver.get('https://www.snapdeal.com")
driver.get('https://www.amazon.com")
driver.back()
driver.forward()
driver.refresh()

====================================================================================
emailbox=driver.find_element(By.XPATH,"//input[@id='Email']")
emailbox.clear()
emailbox.send_keys("abc@gmail.com")
print("result of text:",emailbox.text)
print("result of get_attributr:", emailbox.get_attribute('value'))

====================================================================================
#print all button

from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC


serviceobj = Service("chromedriver-win64/chromedriver.exe")


driver = webdriver.Chrome(service=serviceobj)
driver.maximize_window()


driver.get("https://www.flipkart.com/")
WebDriverWait(driver, 10).until(EC.presence_of_all_elements_located((By.TAG_NAME, "button")))


btns = driver.find_elements(By.TAG_NAME, "button")
inputs = driver.find_elements(By.XPATH, "//input[@type='button']")


print("Total number of buttons:", len(btns)+len(inputs))


count = 1
for btn in btns:
    print(str(count) + " " + btn.text.strip())
    count += 1


for inp in inputs:
    print(str(count)+ " " + inp.text.strip())
    count += 1

driver.quit()

===================================================================================
#use of time.sleep(5)

searchbox=driver.find_element(By.NAME,'q')
searchbox.send_keys("Selenium")
searhbox.submit()
time.sleep(5)
driver.find_element(By.XPATH,"//h3[text()='selenium']").click()

====================================================================================
#use of implicit wait

service = Service("chromedriver-win64/chromedriver.exe")
driver = webdriver.Chrome(service=service)

drive.implicitly_wait(10)

driver.get("https://www.google.com/")

searchbox=driver.find_element(By.NAME,'q')
searchbox.send_keys("Selenium")
searhbox.submit()



driver.find_element(By.XPATH,"//h3[text()='selenium']").click()

====================================================================================
#explicit wait 

from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

service = Service("chromedriver-win64/chromedriver.exe")
driver = webdriver.Chrome(service=service)

#explcit wait declaration
mywait = WebDriverWait(driver,10,poll_frequency=2,ignored_exception=[NoSuchElementException,ElementNotVisibleExce tion,ElementNotselectableException])

or

mywait = WebDriverWait(driver,10,ignored_exception=[Exception])  


driver.get("https://www.google.com/")

searchbox=driver.find_element(By.NAME,'q')
searchbox.send_keys("Selenium")
searhbox.submit()


#driver.find_element(By.XPATH,"//h3[text()='selenium']").click()
#replace with

linkk = mywait.until(EC.presence_of_all_elements_located((By.XPATH,"//h3[text()='selenium']")))

linkk.click()

=========================================================================================
#seelct specific checkbox
driver.find_element(By.XPATH,"(//label[normalize-space()='Sunday'])[1]").click()


#2)select all checkbox
# //input[@type='checkbox' and @class='form-check-input']
# checckboxes = driver.find_elements(By.XPATH,"//input[@type='checkbox' and contains(@id,'day')]")


#way 1
# for i in range(len(checckboxes)):
#     checckboxes[i].click()

#way2
# for i in checckboxes:
#     i.click()



#3)select chooseing
# for i in checckboxes:
#     if i.get_attribute('id') == 'sunday' or i.get_attribute('id') == 'tuesday':
#         i.click()

=========================================================================================
#print all links

from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By

serviceobj = Service("chromedriver-win64/chromedriver.exe")
driver = webdriver.Chrome(service=serviceobj)

driver.get("https://testautomationpractice.blogspot.com/")
driver.maximize_window()

L = driver.find_elements(By.TAG_NAME,'a')
print(len(L))

for i in L:
    print(i.get_attribute('href'))
	
=========================================================================================
#pritn broken links 

from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
import requests

serviceobj = Service("C:/drivers/chromedriver-win64/chromedriver-win64/chromedriver.exe")
driver = webdriver.Chrome(service=serviceobj)

driver.get("http://www.deadlinkcity.com/")
driver.maximize_window()

L = driver.find_elements(By.TAG_NAME,'a')
print(len(L))

broken=0

for i in L:
    url = i.get_attribute('href')
    
    try:
        response = requests.head(url)
    except:
        None

    if response.status_code >= 400:
         broken=broken+1
         print(url)

print("total broken links: ",broken)

=================================================================================
#print all dropdown option

dropdown = Select(driver.find_element(By.ID, "drop"))

# Get all options using dropdown.options
all_options = dropdown.options

# Print all option texts
for i in all_options:
    print(i.text)
	
=========================================================================================
#alert window 

driver.get("https://the-internet.herokuapp.com/javascript_alerts")
driver.maximize_window()
driver.find_element(By.XPATH,"//button[normalize-space()='Click for JS Prompt']").click()
time.sleep(2)

alertwindow = driver.switch_to.alert

print(alertwindow.text)
alertwindow.send_keys("Welcome")
alertwindow.accept()

========================================================================================
#authentication popup

syntax: driver.get("http://username:password@test.com")

========================================================================================
#frames

	from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
import time

# Path to your ChromeDriver
serv_obj = Service(r"D:\\Y.R.G SIR\\Driver\\chromedriver.exe")
driver = webdriver.Chrome(service=serv_obj)

# Open Java 8 Selenium API docs (with frames)
driver.get("https://www.javadoc.io/static/org.seleniumhq.selenium/selenium-api/3.141.59/index.html")
driver.maximize_window()

# Switch to packageListFrame
driver.switch_to.frame("packageListFrame")
driver.find_element(By.LINK_TEXT, "org.openqa.selenium").click()
driver.switch_to.default_content()

# Switch to packageFrame
driver.switch_to.frame("packageFrame")
driver.find_element(By.LINK_TEXT, "WebDriver").click()
driver.switch_to.default_content()

# Switch to classFrame
driver.switch_to.frame("classFrame")
driver.find_element(By.XPATH,"/html/body/div[1]/ul/li[7]/a").click()

=========================================================================================
#get window id
driver.get("https://opensource-demo.orangehrmlive.com/")
driver.maximize_window()
windowid = driver.current_window_handle
print(windowid)


==================================================================================
#change window and print title 

	from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
import time

serv_obj = Service(r"D:\\Y.R.G SIR\\Driver\\chromedriver.exe")
driver = webdriver.Chrome(service=serv_obj)

driver.get("https://opensource-demo.orangehrmlive.com/")
driver.maximize_window()

time.sleep(2)   # wait to make sure footer link loads

# click footer link
driver.find_element(By.LINK_TEXT, "OrangeHRM, Inc").click()

windowIDs = driver.window_handles



#Approach-1
parentwindowID = windowIDs[0]
childwindowID = windowIDs[1]

print("Parent:", parentwindowID) #D492A2ACEC4D555FCE1C976F027098BA
print("Child :", childwindowID)  #087C2EA07C6489FC8214403FD769576F

driver.switch_to.window(childwindowID)
print("title of the child window",driver.title)

driver.switch_to.window(parentwindowID)
print("title of the parent window",driver.title)

#Approach-2
for winid in windowIDs:
    driver.switch_to.window(winid)
    print(driver.title)

========================================================================================
driver.find_element(By.LINK_TEXT, "OrangeHRM, Inc").click()
windowIDs = driver.window_handles
time.sleep(2)
 for winid in windowIDs:
     driver.switch_to.window(winid)
     if driver.title == "OrangeHRM":
         driver.close()

=======================================================================================
========================================================================================
========================================================================================
Q1	How to disable pop ups in chrome browser? Write code snippet for the same.
	from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
import os

# path to chromedriver executable (adjust)
CHROMEDRIVER_PATH = "/path/to/chromedriver"

options = Options()
# Disable the notification pop-ups (permission requests)
prefs = {
    "profile.default_content_setting_values.notifications": 2,  # 1=allow, 2=block
    "profile.default_content_setting_values.popups": 2,
    "profile.default_content_setting_values.automatic_downloads": 1
}
options.add_experimental_option("prefs", prefs)

# Additional flags
options.add_argument("--disable-popup-blocking")
options.add_argument("--disable-notifications")
options.add_argument("--start-maximized")

service = Service(CHROMEDRIVER_PATH)
driver = webdriver.Chrome(service=service, options=options)

try:
    driver.get("https://www.example.com")
    # proceed with test steps...
finally:
    driver.quit()
Q2	Write a python script to count total number of rows and columns from the table present on any webpage.
	from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options

CHROMEDRIVER_PATH = "/path/to/chromedriver"

options = Options()
service = Service(CHROMEDRIVER_PATH)
driver = webdriver.Chrome(service=service, options=options)

try:
    driver.get("https://example.com/page-with-table")

    # Locate the table (adjust locator as needed: id/class/xpath)
    table = driver.find_element(By.XPATH, "//table")   # select the first table on the page

    # Count rows
    rows = table.find_elements(By.TAG_NAME, "tr")
    row_count = len(rows)

    # Count columns - try header first
    header = table.find_elements(By.TAG_NAME, "th")
    if header and len(header) > 0:
        col_count = len(header)
    else:
        # fallback: count td cells in first non-empty row
        first_row_cells = None
        for r in rows:
            tds = r.find_elements(By.TAG_NAME, "td")
            if len(tds) > 0:
                first_row_cells = tds
                break
        col_count = len(first_row_cells) if first_row_cells is not None else 0

    print(f"Rows: {row_count}, Columns: {col_count}")

finally:
    driver.quit()
Q3	Write a python script to print all the rows and columns from the table present on any webpage.
	from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options

CHROMEDRIVER_PATH = "/path/to/chromedriver"

options = Options()
service = Service(CHROMEDRIVER_PATH)
driver = webdriver.Chrome(service=service, options=options)

try:
    driver.get("https://example.com/page-with-table")

    table = driver.find_element(By.XPATH, "//table")  # adjust locator as needed
    rows = table.find_elements(By.TAG_NAME, "tr")

    # Optional: print header if present
    header_cells = table.find_elements(By.XPATH, ".//thead//th")
    if header_cells:
        headers = [h.text.strip() for h in header_cells]
        print("HEADER:", headers)

    # Print each row
    for i, row in enumerate(rows, start=1):
        # prefer td; if not, maybe th inside row (for header rows)
        cells = row.find_elements(By.TAG_NAME, "td")
        if not cells:
            cells = row.find_elements(By.TAG_NAME, "th")
        cell_texts = [c.text.strip() for c in cells]
        # skip empty rows
        if any(cell_texts):
            print(f"Row {i} ->", cell_texts)

finally:
    driver.quit()
Q4	Write a python script to select future date from the datepicker control on any web page.( https://jqueryui.com/datepicker/)
	from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
import datetime
import time

CHROMEDRIVER_PATH = "/path/to/chromedriver"

def select_date_jqueryui(driver, target_date):
    """
    target_date: datetime.date OR string "dd-mm-yyyy"
    Works on https://jqueryui.com/datepicker/ (demo iframe).
    """
    if isinstance(target_date, str):
        day, month, year = map(int, target_date.split("-"))
        target_date = datetime.date(year, month, day)

    # switch to iframe containing the example
    iframe = driver.find_element(By.CSS_SELECTOR, ".demo-frame")
    driver.switch_to.frame(iframe)

    # open the datepicker
    date_input = driver.find_element(By.ID, "datepicker")
    date_input.click()
    time.sleep(0.5)

    # function to read displayed month/year
    def get_displayed_month_year():
        title = driver.find_element(By.CLASS_NAME, "ui-datepicker-title").text  # e.g., "August 2025"
        parts = title.split()
        month_name = parts[0]
        year_num = int(parts[1])
        month_num = datetime.datetime.strptime(month_name, "%B").month
        return month_num, year_num

    # click next until we reach the desired month/year
    while True:
        disp_month, disp_year = get_displayed_month_year()
        if (disp_year, disp_month) == (target_date.year, target_date.month):
            break
        # If target is in future -> click next
        next_button = driver.find_element(By.CLASS_NAME, "ui-datepicker-next")
        next_button.click()
        time.sleep(0.2)

    # select the day
    # Choose the anchor whose text equals the day (note: some days may have leading zeros in other widgets; here it's plain)
    day_locator = f"//a[text()='{target_date.day}']"
    day_elem = driver.find_element(By.XPATH, day_locator)
    day_elem.click()
    # switch back to default content
    driver.switch_to.default_content()

# ---------- main run ----------
options = Options()
service = Service(CHROMEDRIVER_PATH)
driver = webdriver.Chrome(service=service, options=options)

try:
    driver.get("https://jqueryui.com/datepicker/")

    # select a future date, e.g., 25 December 2026
    import datetime
    select_date_jqueryui(driver, datetime.date(2026, 12, 25))
    time.sleep(1)

    # verify: read the input value (switch to iframe)
    driver.switch_to.frame(driver.find_element(By.CSS_SELECTOR, ".demo-frame"))
    val = driver.find_element(By.ID, "datepicker").get_attribute("value")
    print("Selected date value:", val)
    driver.switch_to.default_content()

finally:
    driver.quit()
Q5	Write a python script to select previous date from the datepicker control on any web page. ( https://www.dummyticket.com/dummy-ticket-for-visa-application/)
	from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
import datetime
import time

CHROMEDRIVER_PATH = "/path/to/chromedriver"

def select_past_date_dummy_ticket(driver, target_date):
    """
    target_date: datetime.date OR string "dd-mm-yyyy"
    Works on https://www.dummyticket.com/dummy-ticket-for-visa-application/
    """
    if isinstance(target_date, str):
        day, month, year = map(int, target_date.split("-"))
        target_date = datetime.date(year, month, day)

    driver.get("https://www.dummyticket.com/dummy-ticket-for-visa-application/")
    time.sleep(1)

    # The page might have many date inputs; find the datepicker input you need.
    # Example: there's an input with id 'travel_date' (may vary). We'll search for input[type='text'] inside a datepicker wrapper.
    # Adjust the selector to the real input's id/name on the page.
    # Naive approach: find inputs with class 'form-control' and that open a datepicker on click; prefer explicit id if available.
    date_inputs = driver.find_elements(By.CSS_SELECTOR, "input[type='text']")
    # Choose the first visible input (change logic to pick correct one)
    date_input = None
    for inp in date_inputs:
        if inp.is_displayed() and inp.get_attribute("readonly") is None:
            date_input = inp
            break
    if date_input is None:
        # fallback: take the first visible text input
        date_input = date_inputs[0]

    # open datepicker
    date_input.click()
    time.sleep(0.5)

    # find displayed month-year title and previous button selectors (many datepickers use same structure)
    def get_displayed_month_year():
        title = driver.find_element(By.CLASS_NAME, "ui-datepicker-title").text
        parts = title.split()
        month_name = parts[0]
        year_num = int(parts[1])
        month_num = datetime.datetime.strptime(month_name, "%B").month
        return month_num, year_num

    # if this page uses different classes, adapt: sometimes 'datepicker-days' or bootstrap datepicker; inspect HTML and replace
    # We'll try to find prev button by common selectors
    prev_button = None
    candidate_selectors = [
        ".ui-datepicker-prev",                # jQuery UI
        ".prev",                              # bootstrap-like
        ".datepicker-days thead .prev",       # bootstrap datepicker many variants
        "//a[@class='prev']",                 # xpath fallback
    ]

    for sel in candidate_selectors:
        try:
            if sel.startswith("//"):
                prev_button = driver.find_element(By.XPATH, sel)
            else:
                prev_button = driver.find_element(By.CSS_SELECTOR, sel)
            break
        except:
            prev_button = None

    # If we couldn't find by heuristics, try finding a button with title "Prev" or left arrow
    if prev_button is None:
        try:
            prev_button = driver.find_element(By.XPATH, "//button[contains(@class,'prev') or contains(@title,'Prev') or contains(.,'‹') or contains(.,'«')]")
        except:
            raise Exception("Could not locate previous button for datepicker on this page. Inspect page and update selector.")

    # navigate backwards until target month-year
    while True:
        try:
            disp_month, disp_year = get_displayed_month_year()
        except:
            # if datepicker uses different structure, break to avoid infinite loop
            break

        if (disp_year, disp_month) == (target_date.year, target_date.month):
            break

        prev_button.click()
        time.sleep(0.25)

    # select the day
    try:
        day_elem = driver.find_element(By.XPATH, f"//a[text()='{target_date.day}']")
        day_elem.click()
    except:
        # alternative cell selector (bootstrap datepicker)
        cell = driver.find_element(By.XPATH, f"//td[not(contains(@class,'disabled'))]/button[text()='{target_date.day}']")
        cell.click()

# ---------- main run ----------
options = Options()
service = Service(CHROMEDRIVER_PATH)
driver = webdriver.Chrome(service=service, options=options)

try:
    # Example: choose a past date 15 Aug 2020
    select_past_date_dummy_ticket(driver, "15-08-2020")
    time.sleep(1)
    # verify input value if needed
    # (you may need to locate the specific input again to read value)
finally:
    driver.quit()
References to complete the assignment
1.	https://www.youtube.com/watch?v=GU_rBth5QpI&list=PLUDwpEzHYYLsuUBvuoYTlN0KsBB5t-BDa&index=9

2.	https://www.youtube.com/watch?v=G6dEgpPLzCo&list=PLUDwpEzHYYLsuUBvuoYTlN0KsBB5t-BDa&index=10
